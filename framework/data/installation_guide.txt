You may install PSI-Toolkit via the [Linux packages](/download.html), or
by compiling them from sources. Note that the current version of PSI-Toolkit
requires the Linux system.


## Installation from package

This description is directed for Ubuntu users, but the installation process for other
Linux systems will be similar.

Find and download appropriate Ubuntu package from the PSI-Toolkit [download web
page](download.html). If you do not know your Ubuntu release, check it by:

    $ lsb_release -a
    Distributor ID:	Ubuntu
    Description:	Ubuntu 10.04.3 LTS
    Release:	10.04
    Codename:	lucid

and check your system architecture type:

    $ uname -m
    x86_64

Next double click on the downloaded file or run in terminal:

    $ sudo dpkg -i psi-toolkit_0.3.0-1_amd64.deb

If you get some errors during installation, you  may need to install some
additional packages as it is described in _Requirements_ section.

    $ sudo add-apt-repository ppa:lucid-bleed/ppa
    $ sudo apt-get update
    $ sudo apt-get install libboost-filesystem1.42.0 libboost-graph1.42.0 \
      libboost-program-options1.42.0 libboost-serialization1.42.0 \
      libboost-system1.42.0 libboost-test1.42.0 libboost-thread1.42.0


## Requirements

* cmake
* Boost library
* PCRE library

Optional requirements:

* RE2 - for faster regular expressions
* SWIG - for integration with scripting languages (e.g. Perl, Python)
* Perl library: development files - (Ubuntu package: `libperl-dev`) - for Perl bindings
* GraphViz library: development files - (Ubuntu package: `libgraphviz-dev`) - for gv-writer
* Following libraries (development files) for pdf-reader:
  * Poppler (Ubuntu package: `libpoppler-dev`)
  * Poppler-glib (Ubuntu package: `libpoppler-glib-dev`)
  * GTK2 (Ubuntu package: `libgtk2.0-dev`)
* LibMagic library: development files - (Ubuntu package: `libmagic-dev`)
* Antiword (Ubuntu package: antiword) - for doc-reader
* DjVuLibre library: development files - (Ubuntu package: `libdjvulibre-dev`) - for djvu-reader
* Link Grammar library: development files - (Ubuntu package: `liblink-grammar4-dev`) - for link-parser
* Bison and Flex tools - (Ubuntu packages: `bison` `flex`) - for gobio
* CMPH library: development files - (Ubuntu package: `libcmph-dev`)


### Ubuntu 11.10 or higher

Install required packages:

    $ sudo apt-get install g++ cmake make libpcre3-dev libboost-program-options-dev libboost-graph-dev libboost-filesystem-dev libboost-serialization-dev libboost-thread-dev libboost-system-dev libboost-test-dev

Install optional packages:

    $ sudo apt-get install swig libperl-dev python python-all-dev openjdk-6-jdk libgraphviz-dev libpoppler-dev libpoppler-glib-dev libgtk2.0-dev libmagic-dev liblog4cpp4-dev libaspell-dev antiword libdjvulibre-dev liblink-grammar4-dev

### Ubuntu 10.04

Ubuntu 10.04 might use Boost 1.40, but Boost >=1.42 is needed:

    $ sudo apt-get install python-software-properties
    $ sudo add-apt-repository ppa:lucid-bleed/ppa
    $ sudo apt-get update
    $ sudo apt-get upgrade
    $ sudo apt-get install g++ cmake make libpcre3-dev swig libperl-dev python python-all-dev libboost-program-options1.42-dev libboost-graph1.42-dev libboost-filesystem1.42-dev libboost-serialization1.42-dev libboost-thread1.42-dev libboost-system1.42-dev libboost-test1.42-dev

Some of the above steps might turn out to be unnecessary, it depends on
whether it is a server or regular version.


## Installation from source code

Download source code from read-only git repository:

    $ git clone ssh://git@mrt.wmi.amu.edu.pl:1978/psi-toolkit.git

or from GitHub:

    $ git clone git://github.com/filipg/psi-toolkit.git

and install all the required and/or optional packages.

The compilation and installation procedures are described in [INSTALL.txt]
(http://psi-toolkit.wmi.amu.edu.pl:8000/projects/psi-toolkit/repository/revisions/master/entry/INSTALL.txt) file.

<!--
### Compilation procedure

    $ cd psi-toolkit
    $ mkdir -p build
    $ cd build
    $ cmake -DUSE_JAVA=OFF .. # <- note dots here

or use `cmake -DUSE_JAVA=ON ..` if morfologik is needed.
If problem with JAVA PATH occurs try forcing dirs by (remember to use correct
java folder in command):

    $ cmake -DUSE_JAVA=ON -DJAVA_INCLUDE_PATH2=/usr/lib/jvm/java-7-openjdk-amd64/include/linux/ -DJAVA_INCLUDE_PATH=/usr/lib/jvm/java-7-openjdk-amd64/include/ ..

and run:

    $ make

Test it running (within `build` directory):

    $ ./framework/psi-pipe --version

### Installation procedure

    $ cd psi-toolkit
    $ mkdir -p build
    $ cd build
    $ cmake -DCMAKE_INSTALL_PREFIX=/usr/local -DUSE_JAVA=ON -DIS_INSTALLABLE=ON CMAKE_BUILD_TYPE=Release ..
    $ make

And as root:

    $ make install

In general, however, it is better to use pre-packaged PSI-Toolkit.
-->
